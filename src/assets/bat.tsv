title	icon	description	code
ファイル書き込み	unknown	ファイルに文字を書き込む（追記）	echo _{書き込む文字列}_ >> _{書き込み先ファイル名}_
実行時に入力を非表示	circle-dashed	実行時に入力を非表示	 @echo off
実行時に入力を表示	circle-outline	実行時に入力を表示	 @echo on
メッセージの表示	talk	画面にメッセージを表示	 @echo _{表示するメッセージ}_
何かキーが押されるまで待つ	wait	何かキーが押されるまで、プログラムの実行を一時停止する。	pause
ユーザからの入力文字列を変数に代入	variable	ユーザから文字入力を受け付けて、入力された文字列を変数に代入する。	"set /p _{変数名}_=""入力してください"""
変数に代入	variable	変数に値を代入する。	set _{変数名}_=_{値}_
変数の値を表示	variable	変数に表示されている値をechoコマンドで表示する。	echo %_{変数名}_
バッチファイルのあるディレクトリへ移動	folder	バッチファイルのあるディレクトリへ移動	cd /d %~dp0
○秒間待つ	wait	指定した時間が経過するか、何かキーが入力されるまでプログラムを待機する。	timeout /t _{待ち時間（秒）}_
連番で空ファイルを複数作成	items	「（作成するファイル名）_（連番）.txt」の形式で空のテキストファイルを指定数作成	"for /l %%B in (1,1,_{作成ファイル数}_) do type nul > _{作成するファイル名}_%%B.txt"
ActivePerlで文字列の置換	code	perlの正規表現を使用して、指定したファイルからマッチするパターンをすべて置換する。置換前のファイルはバックアップが作成される。※事前にActivePerlをインストールしておくこと	"perl -p -i.bak -e ""s/_{パターン}_/ _{置換文字列}_/g"" _{対象ファイル名}_"
画面のクリア	clear	プロンプトに表示されている文字を消去する。	cls
ファイルの一覧表示（dir オプション任意）	items	dirコマンドでファイルの一覧表示をする。オプション　/b:ファイル・ディレクトリ名だけ表示。　/o:ソート順（N:名前順、S:サイズ順、D:日時順、-:降順）　例）/o:-n　名前の降順	dir _{オプション}_
ファイルとフォルダの一覧を表示	items	カレントディレクトリに存在するファイル/フォルダ名の一覧を表示	dir /b
ファイルを検索	search	カレントディレクトリからパターンにマッチするファイルを検索する。ワイルドカード「*」が利用できる	dir /b _{ファイル名のパターン　（例）「*.txt」すべてのtxtファイル}_
サブフォルダも含めてファイルを検索	search	カレントディレクトリとサブフォルダからパターンにマッチするファイルを検索する。ワイルドカード「*」が利用できる	dir /b /s _{ファイル名のパターン　（例）「*.txt」すべてのtxtファイル}_
コメント（:）	comment	:でコメントを記述。（「:」は本来ラベルの記述に使うが、コメント替わりに使うことで簡潔にコメントを記述できる。）	: _{ここにコメントを記述}_
コメント（rem）	comment	remでコメントを記述。	rem _{ここにコメントを記述}_
強調コメント（-）	comment	バッチファイル中で見やすいように強調されたコメント	rem -------------------  _{コメント}_  -------------------
強調コメント（＋）	comment	バッチファイル中で見やすいように強調されたコメント	rem +++++++++++++++++++  _{コメント}_  +++++++++++++++++++
強調コメント（＊）	comment	バッチファイル中で見やすいように強調されたコメント	rem *******************  _{コメント}_  *******************
指定したラベルへジャンプ	jump	バッチファイル内に記述されているラベルへ、制御の位置を移動する。※コメントは「:（ラベル名）」の形式で入力する	goto _{ラベル名}_
ラベル	bookmark	ラベルの作成。GOTOやCALLを利用することでラベル以降に書かれた処理を実行することができる	:_{ラベル名}_
サブルーチン呼び出し	return	サブルーチンを呼び出す。サブルーチンは「ラベル」から「exit /b」までが対応する。サブルーチン内で引数を利用するときは「%1」（引数1を利用するとき）のように記述すること。※バッチファイル内にサブルーチンを作成するときは、メインの処理がサブルーチンの中に入らないように、メイン処理終了部分にexitを記述すること。	call :_{サブルーチン名（ラベル名）}_ _{引数1}_ _{引数2}_ _{引数3}_
バッチ処理の終了	exit	バッチ処理を終了する。（サブルーチンで実行した場合はバッチ処理全体を終了する）	exit
サブルーチン呼び出しからの復帰	return	サブルーチンからメインルーチンに戻る。	exit /b
ファイル内テキストの検索	search	指定したファイル内の、検索文字列が存在する行を行番号つきで表示する。大文字と小文字は区別しない。	"find /n /I ""_{検索文字列}_"" _{検索ファイル名}_"
カレントディレクトリをファイルエクスプローラで開く	window-apps	カレントディレクトリをファイルエクスプローラで開く	start .
指定したフォルダをファイルエクスプローラで開く	window-apps	指定したフォルダをファイルエクスプローラで開く	start _{フォルダ名}_
指定したファイルを実行する	run	指定したファイルを実行する。（ファイルのアイコンをダブルクリックしたときと同じ動作をする）	start _{ファイル名}_
カレントディレクトリの移動	folder	カレントディレクトリの移動	cd /d "_{ディレクトリ名}_"
ファイルのコピー	copy	ファイルをコピーする。すでに同名のファイルが存在する場合は上書きするか確認する。	copy _{コピー元ファイル名}_ _{コピー先ファイル名}_ /v /-y
フォルダの作成	new	新しいフォルダを作成する	mkdir _{フォルダ名}_
ファイル名の変更	edit	ファイル名の変更	rename _{変更元ファイル名}_ _{変更先ファイル名}_
空のテキストファイルの作成	text	空のテキストファイルの作成	 type nul > _{作成するファイル名}_
ファイルに文字を書き込む	write	ファイルに文字を書き込む。すでにファイルが存在する場合は上書きする。ファイルが存在しない場合は新規に作成する。	echo _{書き込む文字列}_ > _{書き込み先ファイル名}_
ファイルに文字を書き込む（追記）	write	ファイルに文字を書き込む。すでにファイルが存在する場合は最後の行に追加で書き込む。ファイルが存在しない場合は新規に作成する。	echo _{書き込む文字列}_ >> _{書き込み先ファイル名}_
ファイルの内容を変数へ代入	variable	ファイルの内容を変数へ代入	set /p _{変数名}_=< _{読み込みファイル名}_
URLを開く（既定のブラウザ）	windowlink	既定のブラウザでURLを開く。	start _{URL}_
URLを開く（InternetExplorer）	windowlink	InternetExplorereでURLを開く。	"""C:\Program Files\Internet Explorer\iexplore.exe"" _{URL}_"
カレントディレクトリを表示（特殊な環境変数）	folder	カレントディレクトリのパスをechoコマンドで表示する。（%CD%変数の値は、CD コマンドをオプション無しで実行した時に表示するパスと同じ）	echo %CD%
今日の日付を表示（特殊な環境変数）	calendar	今日の日付を表示	echo %DATE%
現在の時刻を表示（特殊な環境変数）	clock	現在の時刻を表示	echo %TIME%
if文	code	if文	if _{条件}_ ( _{コマンド}_) else ( _{コマンド}_ )
コマンド実行結果を変数に保持	variable	コマンドの実行結果を変数に保持する。	"for /F ""usebackq"" %%i in (`_{コマンド}_`) do (set _{変数名}_=""%%i"")"
パケットの通信テスト（ping）	parallel-tasks	pingコマンドでパケットの通信テストをして、宛先からの応答時間などを調査する。オプション　-w:タイムアウト待ち時間を明示（ms)	ping _{オプション　例）-w 5000}_ _{宛先　例）www.microsoft.com}_
ディレクトリ構造をツリー形式で表示(tree)	parallel-tasks	treeコマンドで、ディレクトリ構造をツリー形式で表示。	tree /f
バッチファイルのアイコンにドラッグ＆ドロップしたファイルを処理	drag-down	バッチファイルのアイコンにドラッグ＆ドロップしたファイルを処理	"IF EXIST %1 GOTO FILEDROP<br>set /p INP=""処理したいファイルをコマンドプロンプトにドラッグ＆ドロップし、Enterを押してください。アイコンにドロップしても実行できます。>""<br>GOTO EXE<br><br>:FILEDROP<br>set INP=%1<br>GOTO EXE<br><br>:EXE<br>_[ここに処理したい内容を書く。ドロップしたファイルのパスは %INP%で取得できる]_"

